name: Debug Kernel Source via SSH

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write 

jobs:
  build-gki:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

#      - name: Maximize Build Space
#        uses: AdityaGarg8/remove-unwanted-software@v5
#        with:
#          remove-dotnet: 'true'          # Frees ~2 GB
#          remove-android: 'true'         # Frees ~9 GB
#          remove-haskell: 'true'         # Frees ~5.2 GB
#          remove-codeql: 'true'          # Frees ~5.4 GB
#          remove-docker-images: 'true'   # Frees ~3.2 GB
#          remove-large-packages: 'true'  # Frees ~3.1 GB
#          remove-swapfile: 'true'        # Frees ~4 GB
#          remove-cached-tools: 'false'   # Avoid unless confirmed safe
#          verbose: 'true'                # Enable detailed logging

      - name: Install ccache
        run: sudo apt update && sudo apt install -y ccache

      - name: Set up ccache
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Install Repo
        run: |
          mkdir -p .bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > .bin/repo
          chmod a+x .bin/repo
          echo "$GITHUB_WORKSPACE/.bin" >> $GITHUB_PATH

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          # Копирование репозиториев для дальнейшей работы
          git clone https://github.com/etherealNest/AnyKernel3 -b "stock-zuma"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "gki-android14-6.1"
          git clone https://github.com/WildPlusKernel/kernel_patches.git

      - name: Check Disk Space Before Sync
        run: |
          echo "Disk space before kernel source sync:"
          df -h

      - name: Initialize and Sync Kernel Source
        run: |
          # Статичные параметры для конкретной сборки
          KERNEL_DIR="kernel_source"
          MANIFEST_URL="https://android.googlesource.com/kernel/manifest"
          MANIFEST_BRANCH="android-gs-shusky-6.1-android16"
          
          # Создание рабочей директории
          mkdir -p "$KERNEL_DIR"
          cd "$KERNEL_DIR"
          
          echo "Initializing repo for branch: $MANIFEST_BRANCH"
          repo init --depth=1 -u "$MANIFEST_URL" -b "$MANIFEST_BRANCH"
          
          # Проверка на случай, если ветка была переименована в 'deprecated'
          # Использует --exit-code для более надежной проверки, чем анализ текста
          if ! git ls-remote --exit-code --heads "$MANIFEST_URL" "refs/heads/$MANIFEST_BRANCH" &>/dev/null; then
            echo "Branch '$MANIFEST_BRANCH' not found. Attempting to use 'deprecated/$MANIFEST_BRANCH'."
            sed -i "s|\"refs/heads/${MANIFEST_BRANCH}\"|\"refs/heads/deprecated/${MANIFEST_BRANCH}\"|g" .repo/manifests/default.xml
          fi
          
          echo "Syncing kernel source..."
          repo sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: Start VS Code Web IDE
        uses: fawazahmed0/action-debug-vscode@main
        with:
          port: 8080
          folder: ${{ github.workspace }}
          # (опционально) токен, чтобы VS Code мог обращаться к GitHub API
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print VS Code connection info
        run: |
          echo "VS Code Web IDE is ready!"
          # Эта команда выведет URL вида https://<ip>:8080/?folder=/github/workspace/kernel_source
          echo "::warning::$(cat /tmp/DEBUG_VSCODE_URL || echo 'URL not found!')"

      - name: Apply Build System Patch
        run: |
          set -e
          echo "Applying build system patch..."

          cp .github/workflows/Patches/fix_BUILD.bazel.patch .
          
          # Проверяем, что файл существует
          if [ ! -f "./fix_BUILD.bazel.patch" ]; then
              echo "ERROR: Patch file not found at ${PATCH_FILE}!"
              exit 1
          fi
          
          # Применяем патч
          patch -p1 --forward --fuzz=3 < fix_BUILD.bazel.patch
          
          echo "Build system patch applied successfully."

      - name: Add KernelSU
        working-directory: kernel_source/aosp
        run: |
          # Просто добавление KernelSU Next в исходный код ядра.
              echo "Adding KernelSU Next..."
              curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next

      - name: Apply SUSFS Patches
        working-directory: kernel_source/aosp
        run: |          
          echo "Applying SUSFS patches..."
          
          # Копируются патчи из ранее скачнаного репозитория SUSFS.
          cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch ./
          patch -p1 --forward --fuzz=3 < 50_add_susfs_in_gki-android14-6.1.patch
          cp ../../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          
          echo "Applying SUSFS patches for KernelSU Next..."
          # Применяю патчи в директории созданной ранее скриптом добавления KernelSU Next.
          cd ./KernelSU-Next

          # Для начала применяю самый основной патч, он ожидаемо должен завершиться с ошибкой.
          cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
          patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true

          # Применяю несколько мелких патчей к файлам к которым не мог применить основной патч.
          cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_apk_sign.c.patch ./
          patch -p1 --forward --fuzz=3 < fix_apk_sign.c.patch
          
          cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch ./
          patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
          
          cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_selinux.c.patch ./
          patch -p1 --forward --fuzz=3 < fix_selinux.c.patch
          
          cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_ksud.c.patch ./
          patch -p1 --forward --fuzz=3 < fix_ksud.c.patch

          cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_rules.c.patch ./
          patch -p1 --forward --fuzz=3 < fix_rules.c.patch
          
      - name: Apply Hooks Patches
        working-directory: kernel_source/aosp
        run: |
          echo "Applying hooks for KernelSU-Next..."
          cp ../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
          patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch

      - name: Apply Hide Stuff Patches
        working-directory: kernel_source/aosp
        run: |
          cp ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Add Configuration Settings
        working-directory: kernel_source/aosp
        run: |
          echo "Adding configuration settings to gki_defconfig..."
          
          # Добавляем в файл gki_defconfig конфигурации KernelSU.
          
          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./arch/arm64/configs/gki_defconfig
                    
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./arch/arm64/configs/gki_defconfig

          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./arch/arm64/configs/gki_defconfig

          # Add BBR Config
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./arch/arm64/configs/gki_defconfig 
          echo "CONFIG_TCP_CONG_BBR=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./arch/arm64/configs/gki_defconfig 

          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./build.config.gki

      - name: Add SUSFS Configuration Settings
        working-directory: kernel_source/aosp
        run: |
          # Добавляем в файл gki_defconfig конфигурации SUSFS.
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/gki_defconfig

      - name: Change Kernel Name and Version
        working-directory: kernel_source/aosp
        run: |
          set -e # Выход при ошибке

          # Устанавливаем суффикс версии
          # Удаляем любую существующую строку CONFIG_LOCALVERSION и добавляем свою
          sed -i '/CONFIG_LOCALVERSION/d' ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_LOCALVERSION=\"-NEXT-SUSFS-etherealKuchen\"" >> ./arch/arm64/configs/gki_defconfig
          
          # Устанавливаем статическую дату компиляции
          # Для uname -v
          perl -pi -e 's{UTS_VERSION="[^"]*"}{UTS_VERSION="#1 SMP PREEMPT Sun Apr 20 04:20:00 UTC 2025"}' ./scripts/mkcompile_h
          
          # Для Bazel (на всякий случай, если где-то используется)
          sed -i 's/build-timestamp = $(or $(KBUILD_BUILD_TIMESTAMP), $(build-timestamp-auto))/build-timestamp = "Sun Apr 20 04:20:00 UTC 2025"/' ./init/Makefile

          # Убираем "-dirty" из версии, если оно появится
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ../build/kernel/kleaf/impl/stamp.bzl

          echo "Kernel version and timestamp successfully modified."

#      - name: Start VS Code Web IDE
#        uses: fawazahmed0/action-debug-vscode@main
#        with:
#          port: 8080
#          folder: ${{ github.workspace }}
#          # (опционально) токен, чтобы VS Code мог обращаться к GitHub API
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Print VS Code connection info
#        run: |
#          echo "VS Code Web IDE is ready!"
#          # Эта команда выведет URL вида https://<ip>:8080/?folder=/github/workspace/kernel_source
#          echo "::warning::$(cat /tmp/DEBUG_VSCODE_URL || echo 'URL not found!')"

      - name: Build Kernel
        working-directory: kernel_source
        run: |
          # Запуск скрипта сборки ядра.
          ./build_shusky.sh --kernel_package=@//aosp

      - name: Prepare Artifacts for Packaging
        run: |
          # Директории для артефактов
          ARTIFACT_DIR="kernel_source/out/shusky/dist"
          ANYKERNEL_DIR="AnyKernel3"
          MKBOOTIMG_DIR="FilesForImg"

          echo "Preparing artifacts from $ARTIFACT_DIR"
        
          # Создаем обе целевые директории
          mkdir -p "$ANYKERNEL_DIR"
          mkdir -p "$MKBOOTIMG_DIR"
          
          # Подготовка для AnyKernel3
          cp "$ARTIFACT_DIR/Image.lz4" "$ANYKERNEL_DIR/Image.lz4"
          cat "$ARTIFACT_DIR"/*.dtb > "$ANYKERNEL_DIR/dtb"
        
          # Подготовка для создания .img файлов
          cp "$ARTIFACT_DIR/Image" "$MKBOOTIMG_DIR/"
          cp "$ARTIFACT_DIR/Image.lz4" "$MKBOOTIMG_DIR/"
          cat "$ARTIFACT_DIR"/*.dtb > "$MKBOOTIMG_DIR/dtb"

          echo "Artifacts prepared successfully."
          echo "--- AnyKernel3 content: ---"
          ls -l "$ANYKERNEL_DIR"
          echo "--- FilesForImg content: ---"
          ls -l "$MKBOOTIMG_DIR"

      - name: Create ZIP Files for Different Formats
        working-directory: AnyKernel3
        run: |
          # Zip the files in the AnyKernel3 directory with a new naming convention
          ZIP_NAME="zuma_A16_Stock_KSU_Next_SUSFS.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*

# МНЕ НУЖНО РАЗОБРАТЬСЯ КАК В ИТОГОВЫЙ boot.img ДОБАВИТЬ RAMDISK.
# ПОКА ПРОШИВКА ЭТИХ ОБРАЗОВ НЕ ДАСЬ ЗАГРУЗИТЬСЯ В СИСТЕМУ.
#      - name: Set environment variables for Tools
#        run: |
#          # Пути указываются относительно корня GITHUB_WORKSPACE
#          # avbtool и ключ подписи находятся в kernel_source/prebuilts/kernel-build-tools
#          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel_source/prebuilts/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
#          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel_source/prebuilts/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
#          
#          # mkbootimg находится в kernel_source/tools/mkbootimg
#          echo "MKBOOTIMG=$GITHUB_WORKSPACE/kernel_source/tools/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
#
#      - name: Build boot.img and vendor_kernel_boot.img
#        # Работаем в директории, где лежат подготовленные файлы
#        working-directory: FilesForImg 
#        run: |          
#          # Создание boot.img (содержит ядро)
#          echo "Building boot.img..."
#          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot.img
#          
#          # Подпись boot.img
#          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
#
#          # Создание vendor_kernel_boot.img (содержит DTB)
#          echo "Building vendor_kernel_boot.img..."
#          # Ключевой параметр --dtb, который использует объединенный файл dtb
#          $MKBOOTIMG --header_version 4 --dtb dtb --output vendor_kernel_boot.img
#
#          # Подпись vendor_kernel_boot.img
#          $AVBTOOL add_hash_footer --partition_name vendor_kernel_boot --partition_size $((64 * 1024 * 1024)) --image vendor_kernel_boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
#
#          # Копируем готовые образы в корень проекта для загрузки артефактов
#          cp boot.img ../boot_shusky_next.img
#          cp vendor_kernel_boot.img ../vendor_kernel_boot_shusky_next.img

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          # Используем статичное, понятное имя
          name: shusky-kernel-NEXT-SUSFS
          path: |
            # Загружаем ZIP-файл из корня
            zuma_A16_Stock_KSU_Next_SUSFS.zip
            
            # Загружаем образы .img из корня
            # boot_shusky_next.img
            # vendor_kernel_boot_shusky_next.img
